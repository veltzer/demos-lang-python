- do demo of how to create your own pypi repo:
	https://www.linode.com/docs/guides/how-to-create-a-private-python-package-repository/
	and how to create, packages and push modules to it
	and how to install modules from it.

- demos of co-routines
	https://docs.python.org/3/library/asyncio-task.html#coroutines


- make CI/CD faster by doing pylint on all the sources ***IN ONE INVOCATION***
	of pylint.
	same for flake8.
	currently build on github takes 25 minutes!!!
	pylint src/**/*.py will do it in 1.5 minutes instead of much more.

- demo of data classes
	https://docs.python.org/3/library/dataclasses.html

- do demos for https://pypi.org/project/yamlpath

- move all stamps into their own folder so that they will
	not be mixed in with the source code.

- do linting on all my examples from a makefile.

- show the number of examples and exercises that I have in README.md.

- do example of the "raise [] from []" syntax:
	https://stackoverflow.com/questions/24752395/python-raise-from-usage
	https://stefan.sofa-rockers.org/2020/10/28/raise-from/

- do example of mutable default values and explain them
	https://florimond.dev/blog/articles/2018/08/python-mutable-defaults-are-the-source-of-all-evil/
	https://towardsdatascience.com/python-pitfall-mutable-default-arguments-9385e8265422

- do examples for relative import
	https://stackoverflow.com/questions/16981921/relative-imports-in-python-3
	https://docs.python.org/2.5/whatsnew/pep-328.html

- read the following three articles and write examples of them:
	https://docs.python.org/3/howto/descriptor.html
	https://docs.python.org/3/howto/functional.html
	https://chrisyeh96.github.io/2017/08/08/definitive-guide-python-imports.html#absolute-vs-relative-import

- check that we don't have a subfolder in src which does not have an __init__.py file.
- check what suffixes of files we have in the src folder.
	maybe add a tool like that to pycmdtools.

- order all documentation in the 'doc' folder. possibly move everything to notes?

- chmod 644 all scripts and run them using prun.
	document all of this in the README.
	make sure to have a test where all folders under src will have an __init__.py in them
		(otherwise we could not run them).
	do all of this for the python2 demos too.

- show python3 inheritance:
	class Foo(Bar):
	    def baz(self, arg):
		return super().baz(arg)
	https://stackoverflow.com/questions/805066/call-a-parent-classs-method-from-child-class-in-python

- show how to anotate generators:
	https://stackoverflow.com/questions/27264250/how-to-annotate-a-generator-in-python3

- show how to make a python daemon:
	https://pypi.org/project/python-daemon/

- show how to silence pythons http.server
	https://stackoverflow.com/questions/3389305/how-to-silent-quiet-httpserver-and-basichttprequesthandlers-stderr-output

- show how to detect mime types:
	https://docs.python.org/3/library/mimetypes.html

- fix the demo of the http server which is python2 oriented.
	https://daanlenaerts.com/blog/2015/06/03/create-a-simple-http-server-with-python-3/

- add some ipython demos

- add demos of the prompt_toolkit:
	https://github.com/jonathanslenders/python-prompt-toolkit

- add demos of dispy distribution framework
	http://dispy.sourceforge.net

- do examples of the following packages:
	operator
	functools

- do examples of how to check python code without running it.
	There are many ways to do it.
	References:
	http://stackoverflow.com/questions/4284313/how-can-i-check-the-syntax-of-python-script-without-executing-it

- write a python example which does many things simulteneously using 'asynccore' or 'asyncio':
	- having console UI (like cmd) receiving events on every click.
	- receiving file system events with fnotify.
	- receiving signals from processes that it runs in the background.
	- receiving signals from ssh sessions (paramiko).
	- signals (like SIGINT).
	- printing stuff on the screen.

- add example about making a manual page out of pydoc comments.
	http://stackoverflow.com/questions/7176560/generating-python-cli-man-page
	This is using sphinx which is already a dependency of this package.

- pass check_all and make it part of the build.

- print the number of examples and lines of code on the README.md
	file using templar.

- add a make check_code which runs the python compiler on all the scripts
	(but does not run them, just checks the syntax).
	how do I do that?!?
- demo the 'asyncio' module.
- do example of using the multithreading module.
- do an example of how to exit from a python script
	(quit(),exit(), os._exit() and all).
- do an oo demo of 'isinstance' and 'issubclass'
- show the problems of inheritance in python and why we need __
- show using the iterator interface directly.
- do an example that demonstrates the difference between inheriting
	from 'object' and not. See the 'type' example for a starting point for this one.
- do more realistic singleton examples. With multi-thread support,
	safe from direct construction and real static methods.
- do a singleton example by overloading the __new__ operator and always
	returning the same object.
- do a multi theading example that shows thread ids at the operating system level.
- do example about finally.
- do example about division and //.
- do example about cyclic dependency between modules.
- do example of items in the dict example and more.
- show a demo of a profiler.
- show how to see garbage collector events.
- show examples about data strcutures from third parties.
- see that I have examples of the following:
	- classmethod
	- property.
	- decorators.
	- locks.
	- system(3) wrappers.
	- fork and exec.
- do demo of dis.dis for disassembly.
- show examples of controlling recursion depth via sys.setrecusionlimit.
- do examples along the lines of
	http://www.python-course.eu/pipes.php
